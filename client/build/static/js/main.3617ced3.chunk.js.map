{"version":3,"sources":["components/Task.js","components/Commentcovid.js","App.js","serviceWorker.js","config.js","index.js"],"names":["props","task","editTask","deleteTask","id","name","todo","passid","className","onClick","Commentcovid","useState","tasks","setTasks","setName","useEffect","retriveData","firestore","collection","orderBy","onSnapshot","snapshot","console","log","myTask","docs","map","d","data","doc","delete","set","type","onChange","e","target","value","style","margin","length","display","listStyle","index","key","App","Boolean","window","location","hostname","match","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","apps","initializeApp","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2QAGe,G,KAAA,SAACA,GAAW,IACfC,EAA+BD,EAA/BC,KAAMC,EAAyBF,EAAzBE,SAAUC,EAAeH,EAAfG,WAChBC,EAA2BH,EAA3BG,GAAIC,EAAuBJ,EAAvBI,KAAMC,EAAiBL,EAAjBK,KAAMC,EAAWN,EAAXM,OACxB,OACI,4BACI,yBAAKC,UAAU,MAAf,YAA8BJ,GAE9B,yBAAKI,UAAU,UAAf,QAA8BD,GAC9B,yBAAKC,UAAU,QAAQH,GACvB,yBAAKG,UAAU,QAAQF,GAEvB,yBAAKE,UAAU,gBACX,4BAAQA,UAAU,QAAQC,QAAS,kBAAMP,EAASE,KAAlD,QACA,4BAAQI,UAAU,MAAMC,QAAS,kBAAMN,EAAWC,KAAlD,cCoDDM,EA/DM,WAAO,IAAD,EAEAC,mBAAS,IAFT,mBAElBC,EAFkB,KAEZC,EAFY,OAKDF,mBAAS,IALR,mBAKlBN,EALkB,KAKZS,EALY,KAOzBC,qBAAW,WACTC,MACA,IAEF,IAAMA,EAAc,WAClBC,EAAUC,WAAW,SAASC,QAAQ,KAAM,OAAOC,YAAY,SAAAC,GAC7DC,QAAQC,IAAIF,GACZ,IAAIG,EAASH,EAASI,KAAKC,KAAI,SAAAC,GAAM,IAAD,EACXA,EAAEC,OACvB,MAAO,CAACxB,GAFwB,EACxBA,GACGC,KAFqB,EACpBA,SAGhBQ,EAASW,OA2BPrB,EAAa,SAACC,GAClBa,EAAUC,WAAW,SAASW,IAAIzB,EAAK,IAAI0B,UAGvC5B,EAAW,SAACE,GAChBa,EAAUC,WAAW,SAASW,IAAIzB,EAAK,IAAI2B,IAAI,CAAC3B,KAAGC,UAGrD,OACE,yBAAKG,UAAU,iBACb,oCACA,2BAAOwB,KAAK,OAAO3B,KAAK,OAAO4B,SAAU,SAACC,GAAD,OAAOpB,EAAQoB,EAAEC,OAAOC,UACjE,4BAAQC,MAAO,CAACC,OAAO,OAAQ7B,QAjBnB,WACd,IAAIL,EAAuB,IAAjBQ,EAAM2B,OAAgB,EAAI3B,EAAMA,EAAM2B,OAAS,GAAGnC,GAAK,EAC9Da,EAAUC,WAAW,SAASW,IAAIzB,EAAK,IAAI2B,IAAI,CAAE3B,KAAIC,WAetD,UACA,wBAAIgC,MAAO,CAAEG,QAAS,OAAQC,UAAW,SAhCxC7B,GAASA,EAAM2B,OACT3B,EAAMc,KAAK,SAACzB,EAAKyC,GAAN,OAChB,kBAAC,EAAD,CAAMC,IAAOD,EACPzC,KAAQA,EACRE,WAAcA,EACdD,SAAYA,OAKX,0CC5BA0C,EAVH,WAIV,OACE,kBAAC,EAAD,OCIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBN,IAWiBC,EAXF,CACbC,OAAQ,0CACRC,WAAY,6BACZC,YAAa,oCACbC,UAAW,aACXC,cAAe,yBACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,gB,sBCCY,IAAzBC,IAASC,KAAKrB,QACdoB,IAASE,cAAcX,GACpB,IAAMjC,EAAY0C,IAAS1C,YAIlC6C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SFoH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,a","file":"static/js/main.3617ced3.chunk.js","sourcesContent":["import React from 'react';\nimport './Task.css'\n\nexport default (props) => {\n    const { task, editTask, deleteTask } = props;\n    const { id, name, todo, passid } = task\n    return (\n        <li >\n            <div className=\"id\">Commit : {id}</div>\n\n            <div className=\"passid\">ID : {passid}</div>\n            <div className=\"name\">{name}</div>\n            <div className=\"todo\">{todo}</div>\n\n            <div className='bt-container'>\n                <button className=\"green\" onClick={() => editTask(id)} >Edit</button>\n                <button className=\"red\" onClick={() => deleteTask(id)} >Delete</button>\n            </div>\n        </li>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport {firestore} from '../index'\nimport Task from './Task'\nimport './Task.css'\n\nconst Commentcovid = () => {\n\n  const [tasks,setTasks] = useState([\n\n  ])\n  const [name, setName] = useState('')\n\n  useEffect( () => {\n    retriveData()\n  },[])\n\n  const retriveData = () => {\n    firestore.collection(\"tasks\").orderBy('id', 'asc').onSnapshot( snapshot => {\n      console.log(snapshot)\n      let myTask = snapshot.docs.map(d => {\n          const { id, name } = d.data()\n          return {id,name }\n      })\n      setTasks(myTask)\n    })\n  }\n\n\n\n\n  const renderTask =() =>{\n    if(tasks && tasks.length){\n      return tasks.map( (task,index) => (\n        <Task key = {index}\n              task = {task}\n              deleteTask = {deleteTask}\n              editTask = {editTask} />\n        )\n      )\n     \n    }else{\n      return ( <li>No task</li> )\n    }\n  }\n\n  const addTask = () =>{\n    let id = (tasks.length === 0) ? 1 : tasks[tasks.length - 1].id + 1\n       firestore.collection(\"tasks\").doc(id + '').set({ id, name })\n  }\n\n  const deleteTask = (id) =>{\n    firestore.collection('tasks').doc(id + '').delete()\n  }\n\n  const editTask = (id) => {\n    firestore.collection('tasks').doc(id + '').set({id,name})\n  }\n\n  return (\n    <div className='app-container'>\n      <h1>Todo</h1>\n      <input type=\"text\" name=\"name\" onChange={(e) => setName(e.target.value)} />\n      <button style={{margin:'5px'}} onClick={addTask} >Submit</button> \n      <ul style={{ display: 'flex', listStyle: 'none' }} >{ renderTask() }</ul>\n    </div>\n  );\n}\n\nexport default Commentcovid;","import React from 'react';\nimport Commentcovid from './components/Commentcovid';\n\nconst App = () => {\n\n\n\n  return (\n    <Commentcovid />\n\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const config = {\n  apiKey: \"AIzaSyBGlha1qF8f-WWRvPlUBnrw3CdLRlVgV5A\",\n  authDomain: \"todo-93970.firebaseapp.com\",\n  databaseURL: \"https://todo-93970.firebaseio.com\",\n  projectId: \"todo-93970\",\n  storageBucket: \"todo-93970.appspot.com\",\n  messagingSenderId: \"861962293437\",\n  appId: \"1:861962293437:web:f15b6e92a91b5f570ca7d4\",\n  measurementId: \"G-L7DJXHYFDS\"\n};\n\n  export default config;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport config from './config'\nimport firebase from 'firebase/app';\nimport 'firebase/firestore'\n\nif( firebase.apps.length === 0)\n    firebase.initializeApp(config);\nexport const firestore = firebase.firestore()\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}